;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/10/2023 22:45:08
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF16  	GOTO        44
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x001C	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x001E	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0022	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0024	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0026	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0028	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x002A	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x002C	0xF000EC44  	CALL        136, 0
;EX20.c,22 :: 		void main() {
;EX20.c,23 :: 		trisd = 0;      // Configura PORTD como saída
0x0030	0x6A95      	CLRF        TRISD 
;EX20.c,24 :: 		trisa.ra5 = 0;  // Configura RA5 como saída
0x0032	0x9A92      	BCF         TRISA, 5 
;EX20.c,26 :: 		while (1) {  // Loop infinito
L_main0:
;EX20.c,27 :: 		for (i = 0; i < 16; i++) {  // Loop de contagem de 0 a F
0x0034	0x6A25      	CLRF        _i 
L_main2:
0x0036	0x0E10      	MOVLW       16
0x0038	0x5C25      	SUBWF       _i, 0 
0x003A	0xE21C      	BC          L_main3
;EX20.c,28 :: 		portd = segmentValues[i];  // Atualiza os segmentos do display
0x003C	0x0E15      	MOVLW       _segmentValues
0x003E	0x6EE9      	MOVWF       FSR0L 
0x0040	0x0E00      	MOVLW       hi_addr(_segmentValues)
0x0042	0x6EEA      	MOVWF       FSR0L+1 
0x0044	0x5025      	MOVF        _i, 0 
0x0046	0x26E9      	ADDWF       FSR0L, 1 
0x0048	0xB0D8      	BTFSC       STATUS, 0 
0x004A	0x2AEA      	INCF        FSR0L+1, 1 
0x004C	0xFF83CFEE  	MOVFF       POSTINC0, PORTD
;EX20.c,29 :: 		porta.ra5 = 1;             // Ativa o display
0x0050	0x8A80      	BSF         PORTA, 5 
;EX20.c,30 :: 		delay_ms(1000);            // Mantém o display ativo por 1 segundo
0x0052	0x0E0B      	MOVLW       11
0x0054	0x6E0B      	MOVWF       R11, 0
0x0056	0x0E26      	MOVLW       38
0x0058	0x6E0C      	MOVWF       R12, 0
0x005A	0x0E5D      	MOVLW       93
0x005C	0x6E0D      	MOVWF       R13, 0
L_main5:
0x005E	0x2E0D      	DECFSZ      R13, 1, 0
0x0060	0xD7FE      	BRA         L_main5
0x0062	0x2E0C      	DECFSZ      R12, 1, 0
0x0064	0xD7FC      	BRA         L_main5
0x0066	0x2E0B      	DECFSZ      R11, 1, 0
0x0068	0xD7FA      	BRA         L_main5
0x006A	0x0000      	NOP
0x006C	0x0000      	NOP
;EX20.c,31 :: 		porta.ra5 = 1;             // Desativa o display antes de atualizar o valor
0x006E	0x8A80      	BSF         PORTA, 5 
;EX20.c,27 :: 		for (i = 0; i < 16; i++) {  // Loop de contagem de 0 a F
0x0070	0x2A25      	INCF        _i, 1 
;EX20.c,32 :: 		}
0x0072	0xD7E1      	BRA         L_main2
L_main3:
;EX20.c,33 :: 		}
0x0074	0xD7DF      	BRA         L_main0
;EX20.c,34 :: 		}
L_end_main:
0x0076	0xD7FF      	BRA         $+0
; end of _main
0x0088	0xF015EE10  	LFSR        1, 21
0x008C	0x0E10      	MOVLW       16
0x008E	0x6E00      	MOVWF       R0 
0x0090	0x0E01      	MOVLW       1
0x0092	0x6E01      	MOVWF       R1 
0x0094	0x0E78      	MOVLW       120
0x0096	0x6EF6      	MOVWF       4086 
0x0098	0x0E00      	MOVLW       0
0x009A	0x6EF7      	MOVWF       TBLPTRH 
0x009C	0x0E00      	MOVLW       0
0x009E	0x6EF8      	MOVWF       TBLPTRU 
0x00A0	0xF000EC0E  	CALL        28, 0
0x00A4	0x0012      	RETURN      0
;EX20.c,0 :: ?ICS_segmentValues
0x0078	0x063F ;?ICS_segmentValues+0
0x007A	0x4F5B ;?ICS_segmentValues+2
0x007C	0x6D66 ;?ICS_segmentValues+4
0x007E	0x077D ;?ICS_segmentValues+6
0x0080	0x6F7F ;?ICS_segmentValues+8
0x0082	0x7C77 ;?ICS_segmentValues+10
0x0084	0x5E39 ;?ICS_segmentValues+12
0x0086	0x7179 ;?ICS_segmentValues+14
; end of ?ICS_segmentValues
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [16]    ___CC2DW
0x002C      [76]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015      [16]    _segmentValues
0x0025       [1]    _i
0x0F80       [1]    PORTA
0x0F83       [1]    PORTD
0x0F92       [1]    TRISA
0x0F95       [1]    TRISD
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0078      [16]    ?ICS_segmentValues
