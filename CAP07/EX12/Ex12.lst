;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 21/10/2023 16:15:02
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF0E  	GOTO        28
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_main:
;Ex12.c,1 :: 		void main() {
;Ex12.c,3 :: 		trisb = 0b00001111;  // Configura RB0, RB1, RB2 e RB3 como entrada
0x001C	0x0E0F      	MOVLW       15
0x001E	0x6E93      	MOVWF       TRISB 
;Ex12.c,4 :: 		trisd = 0;  // Configura PORTD como saída
0x0020	0x6A95      	CLRF        TRISD 
;Ex12.c,5 :: 		trisa.f5 = 0;  // Configura RA5 como saída
0x0022	0x9A92      	BCF         TRISA, 5 
;Ex12.c,6 :: 		adcon0 = 0;  // Configura ADCON0 para modo digital
0x0024	0x6AC2      	CLRF        ADCON0 
;Ex12.c,7 :: 		adcon1 = 15;  // Configura ADCON1 para modo digital
0x0026	0x0E0F      	MOVLW       15
0x0028	0x6EC1      	MOVWF       ADCON1 
;Ex12.c,9 :: 		while (1) {  // Loop infinito para manter o programa rodando
L_main0:
;Ex12.c,12 :: 		porta.f5 = 1;
0x002A	0x8A80      	BSF         PORTA, 5 
;Ex12.c,14 :: 		if (portb.f0 == 0) {  // Se a chave S0 em RB0 for pressionada
0x002C	0xB081      	BTFSC       PORTB, 0 
0x002E	0xD003      	BRA         L_main2
;Ex12.c,16 :: 		portd = 0b00111111;  // Exibe 0 no display de 7 segmentos
0x0030	0x0E3F      	MOVLW       63
0x0032	0x6E83      	MOVWF       PORTD 
;Ex12.c,17 :: 		}
0x0034	0xD010      	BRA         L_main3
L_main2:
;Ex12.c,18 :: 		else if (portb.f1 == 0) {  // Se a chave S1 em RB1 for pressionada
0x0036	0xB281      	BTFSC       PORTB, 1 
0x0038	0xD003      	BRA         L_main4
;Ex12.c,19 :: 		portd = 0b00000110;  // Exibe 1 no display de 7 segmentos
0x003A	0x0E06      	MOVLW       6
0x003C	0x6E83      	MOVWF       PORTD 
;Ex12.c,20 :: 		}
0x003E	0xD00B      	BRA         L_main5
L_main4:
;Ex12.c,21 :: 		else if (portb.f2 == 0) {  // Se a chave S2 em RB2 for pressionada
0x0040	0xB481      	BTFSC       PORTB, 2 
0x0042	0xD003      	BRA         L_main6
;Ex12.c,23 :: 		portd = 0b01011011;  // Exibe 2 no display de 7 segmentos
0x0044	0x0E5B      	MOVLW       91
0x0046	0x6E83      	MOVWF       PORTD 
;Ex12.c,24 :: 		}
0x0048	0xD006      	BRA         L_main7
L_main6:
;Ex12.c,25 :: 		else if (portb.f3 == 0) {  // Se a chave S3 em RB3 for pressionada
0x004A	0xB681      	BTFSC       PORTB, 3 
0x004C	0xD003      	BRA         L_main8
;Ex12.c,26 :: 		portd = 0b01111001;  // Exibe 3 no display de 7 segmentos
0x004E	0x0E79      	MOVLW       121
0x0050	0x6E83      	MOVWF       PORTD 
;Ex12.c,27 :: 		}
0x0052	0xD001      	BRA         L_main9
L_main8:
;Ex12.c,30 :: 		porta.f5 = 0;
0x0054	0x9A80      	BCF         PORTA, 5 
;Ex12.c,31 :: 		}
L_main9:
L_main7:
L_main5:
L_main3:
;Ex12.c,32 :: 		}
0x0056	0xD7E9      	BRA         L_main0
;Ex12.c,33 :: 		}
L_end_main:
0x0058	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [62]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0F80       [1]    PORTA
0x0F81       [1]    PORTB
0x0F83       [1]    PORTD
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
