;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/10/2023 20:47:32
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF50  	GOTO        160
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_Div_16X16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x001C	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x001E	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x0020	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x0022	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x0024	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x0026	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x0028	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x002A	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x002C	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x002E	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x0030	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x0032	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x0034	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x0036	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x0038	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x003A	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x003C	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x003E	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x0040	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x0042	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x0044	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x0046	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x0048	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x004A	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x004C	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x004E	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
L_end_Div_16X16_U:
0x0050	0x0012      	RETURN      0
; end of _Div_16X16_U
_getSegmentValue:
;EX15.c,7 :: 		unsigned char getSegmentValue(unsigned char digit) {
;EX15.c,19 :: 		};
0x0052	0x0E3F      	MOVLW       63
0x0054	0x6E1F      	MOVWF       getSegmentValue_segmentValues_L0 
0x0056	0x0E06      	MOVLW       6
0x0058	0x6E20      	MOVWF       getSegmentValue_segmentValues_L0+1 
0x005A	0x0E5B      	MOVLW       91
0x005C	0x6E21      	MOVWF       getSegmentValue_segmentValues_L0+2 
0x005E	0x0E4F      	MOVLW       79
0x0060	0x6E22      	MOVWF       getSegmentValue_segmentValues_L0+3 
0x0062	0x0E66      	MOVLW       102
0x0064	0x6E23      	MOVWF       getSegmentValue_segmentValues_L0+4 
0x0066	0x0E6D      	MOVLW       109
0x0068	0x6E24      	MOVWF       getSegmentValue_segmentValues_L0+5 
0x006A	0x0E7D      	MOVLW       125
0x006C	0x6E25      	MOVWF       getSegmentValue_segmentValues_L0+6 
0x006E	0x0E07      	MOVLW       7
0x0070	0x6E26      	MOVWF       getSegmentValue_segmentValues_L0+7 
0x0072	0x0E7F      	MOVLW       127
0x0074	0x6E27      	MOVWF       getSegmentValue_segmentValues_L0+8 
0x0076	0x0E6F      	MOVLW       111
0x0078	0x6E28      	MOVWF       getSegmentValue_segmentValues_L0+9 
;EX15.c,20 :: 		return segmentValues[digit];
0x007A	0x0E1F      	MOVLW       getSegmentValue_segmentValues_L0
0x007C	0x6EE9      	MOVWF       FSR0L 
0x007E	0x0E00      	MOVLW       hi_addr(getSegmentValue_segmentValues_L0)
0x0080	0x6EEA      	MOVWF       FSR0L+1 
0x0082	0x501E      	MOVF        FARG_getSegmentValue_digit, 0 
0x0084	0x26E9      	ADDWF       FSR0L, 1 
0x0086	0xB0D8      	BTFSC       STATUS, 0 
0x0088	0x2AEA      	INCF        FSR0L+1, 1 
0x008A	0xF000CFEE  	MOVFF       POSTINC0, R0
;EX15.c,21 :: 		}
L_end_getSegmentValue:
0x008E	0x0012      	RETURN      0
; end of _getSegmentValue
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0090	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0092	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0096	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0098	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x009A	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x009C	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x009E	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x00A0	0x0E01      	MOVLW       1
0x00A2	0x6E15      	MOVWF       _lastStateF1 
0x00A4	0x0E01      	MOVLW       1
0x00A6	0x6E16      	MOVWF       _lastStateF2 
0x00A8	0x6A17      	CLRF        _peopleCount 
0x00AA	0x6A18      	CLRF        24 
0x00AC	0x0E01      	MOVLW       1
0x00AE	0x6E19      	MOVWF       _lastStateF0 
;EX15.c,23 :: 		void main() {
;EX15.c,24 :: 		trisd = 0;  // Configura PORTD como saída
0x00B0	0x6A95      	CLRF        TRISD 
;EX15.c,25 :: 		trisa = 0;  // Configura PORTA como saída
0x00B2	0x6A92      	CLRF        TRISA 
;EX15.c,26 :: 		adcon0 = 0;  // Configura ADCON0 para modo digital
0x00B4	0x6AC2      	CLRF        ADCON0 
;EX15.c,27 :: 		adcon1 = 15;  // Configura ADCON1 para modo digital
0x00B6	0x0E0F      	MOVLW       15
0x00B8	0x6EC1      	MOVWF       ADCON1 
;EX15.c,28 :: 		portb.f0 = 1;
0x00BA	0x8081      	BSF         PORTB, 0 
;EX15.c,29 :: 		portb.f1 = 1;
0x00BC	0x8281      	BSF         PORTB, 1 
;EX15.c,30 :: 		portb.f2 = 1;
0x00BE	0x8481      	BSF         PORTB, 2 
;EX15.c,31 :: 		peopleCount = 0;
0x00C0	0x6A17      	CLRF        _peopleCount 
0x00C2	0x6A18      	CLRF        _peopleCount+1 
;EX15.c,33 :: 		while (1) {
L_main0:
;EX15.c,34 :: 		unsigned char hundreds = peopleCount / 100;
0x00C4	0x0E64      	MOVLW       100
0x00C6	0x6E04      	MOVWF       R4 
0x00C8	0x0E00      	MOVLW       0
0x00CA	0x6E05      	MOVWF       R5 
0x00CC	0xF000C017  	MOVFF       _peopleCount, R0
0x00D0	0xF001C018  	MOVFF       _peopleCount+1, R1
0x00D4	0xDFA3      	RCALL       _Div_16X16_U
0x00D6	0xF01CC000  	MOVFF       R0, FLOC__main
0x00DA	0xF01DC001  	MOVFF       R1, FLOC__main+1
0x00DE	0x0E64      	MOVLW       100
0x00E0	0x6E04      	MOVWF       R4 
0x00E2	0x0E00      	MOVLW       0
0x00E4	0x6E05      	MOVWF       R5 
0x00E6	0xF000C017  	MOVFF       _peopleCount, R0
0x00EA	0xF001C018  	MOVFF       _peopleCount+1, R1
0x00EE	0xDF96      	RCALL       _Div_16X16_U
0x00F0	0xF000C008  	MOVFF       R8, R0
0x00F4	0xF001C009  	MOVFF       R9, R1
;EX15.c,35 :: 		unsigned char tens = (peopleCount % 100) / 10;
0x00F8	0x0E0A      	MOVLW       10
0x00FA	0x6E04      	MOVWF       R4 
0x00FC	0x0E00      	MOVLW       0
0x00FE	0x6E05      	MOVWF       R5 
0x0100	0xDF8D      	RCALL       _Div_16X16_U
0x0102	0xF01AC000  	MOVFF       R0, main_tens_L1
;EX15.c,36 :: 		unsigned char units = peopleCount % 10;
0x0106	0x0E0A      	MOVLW       10
0x0108	0x6E04      	MOVWF       R4 
0x010A	0x0E00      	MOVLW       0
0x010C	0x6E05      	MOVWF       R5 
0x010E	0xF000C017  	MOVFF       _peopleCount, R0
0x0112	0xF001C018  	MOVFF       _peopleCount+1, R1
0x0116	0xDF82      	RCALL       _Div_16X16_U
0x0118	0xF000C008  	MOVFF       R8, R0
0x011C	0xF001C009  	MOVFF       R9, R1
0x0120	0xF01BC000  	MOVFF       R0, main_units_L1
;EX15.c,39 :: 		porta = 0b00001000;
0x0124	0x0E08      	MOVLW       8
0x0126	0x6E80      	MOVWF       PORTA 
;EX15.c,40 :: 		portd = getSegmentValue(hundreds);
0x0128	0xF01EC01C  	MOVFF       FLOC__main, FARG_getSegmentValue_digit
0x012C	0xDF92      	RCALL       _getSegmentValue
0x012E	0xFF83C000  	MOVFF       R0, PORTD
;EX15.c,41 :: 		delay_ms(10);  // Um pequeno atraso para garantir que o display seja atualizado corretamente
0x0132	0x0E1A      	MOVLW       26
0x0134	0x6E0C      	MOVWF       R12, 0
0x0136	0x0EF8      	MOVLW       248
0x0138	0x6E0D      	MOVWF       R13, 0
L_main2:
0x013A	0x2E0D      	DECFSZ      R13, 1, 0
0x013C	0xD7FE      	BRA         L_main2
0x013E	0x2E0C      	DECFSZ      R12, 1, 0
0x0140	0xD7FC      	BRA         L_main2
0x0142	0x0000      	NOP
;EX15.c,44 :: 		porta = 0b00010000;
0x0144	0x0E10      	MOVLW       16
0x0146	0x6E80      	MOVWF       PORTA 
;EX15.c,45 :: 		portd = getSegmentValue(tens);
0x0148	0xF01EC01A  	MOVFF       main_tens_L1, FARG_getSegmentValue_digit
0x014C	0xDF82      	RCALL       _getSegmentValue
0x014E	0xFF83C000  	MOVFF       R0, PORTD
;EX15.c,46 :: 		delay_ms(10);  // Um pequeno atraso para garantir que o display seja atualizado corretamente
0x0152	0x0E1A      	MOVLW       26
0x0154	0x6E0C      	MOVWF       R12, 0
0x0156	0x0EF8      	MOVLW       248
0x0158	0x6E0D      	MOVWF       R13, 0
L_main3:
0x015A	0x2E0D      	DECFSZ      R13, 1, 0
0x015C	0xD7FE      	BRA         L_main3
0x015E	0x2E0C      	DECFSZ      R12, 1, 0
0x0160	0xD7FC      	BRA         L_main3
0x0162	0x0000      	NOP
;EX15.c,49 :: 		porta = 0b00100000;
0x0164	0x0E20      	MOVLW       32
0x0166	0x6E80      	MOVWF       PORTA 
;EX15.c,50 :: 		portd = getSegmentValue(units);
0x0168	0xF01EC01B  	MOVFF       main_units_L1, FARG_getSegmentValue_digit
0x016C	0xDF72      	RCALL       _getSegmentValue
0x016E	0xFF83C000  	MOVFF       R0, PORTD
;EX15.c,51 :: 		delay_ms(10);  // Um pequeno atraso para garantir que o display seja atualizado corretamente
0x0172	0x0E1A      	MOVLW       26
0x0174	0x6E0C      	MOVWF       R12, 0
0x0176	0x0EF8      	MOVLW       248
0x0178	0x6E0D      	MOVWF       R13, 0
L_main4:
0x017A	0x2E0D      	DECFSZ      R13, 1, 0
0x017C	0xD7FE      	BRA         L_main4
0x017E	0x2E0C      	DECFSZ      R12, 1, 0
0x0180	0xD7FC      	BRA         L_main4
0x0182	0x0000      	NOP
;EX15.c,53 :: 		if (portb.f0 == 0 && lastStateF0 == 1) {  // Se a chave 0 é pressionada (entrada de pessoa)
0x0184	0xB081      	BTFSC       PORTB, 0 
0x0186	0xD019      	BRA         L_main7
0x0188	0x5019      	MOVF        _lastStateF0, 0 
0x018A	0x0A01      	XORLW       1
0x018C	0xE116      	BNZ         L_main7
L__main20:
;EX15.c,54 :: 		if (peopleCount < 1000) {  // Verifica se o número de pessoas é menor que 9
0x018E	0x0E03      	MOVLW       3
0x0190	0x5C18      	SUBWF       _peopleCount+1, 0 
0x0192	0xE102      	BNZ         L__main23
0x0194	0x0EE8      	MOVLW       232
0x0196	0x5C17      	SUBWF       _peopleCount, 0 
L__main23:
0x0198	0xE202      	BC          L_main8
;EX15.c,55 :: 		peopleCount++;  // Incrementa o contador de pessoas
0x019A	0x4A17      	INFSNZ      _peopleCount, 1 
0x019C	0x2A18      	INCF        _peopleCount+1, 1 
;EX15.c,56 :: 		}
L_main8:
;EX15.c,58 :: 		delay_ms(1000);  // Aguarda 100 ms para evitar contagem múltipla de uma única pessoa
0x019E	0x0E0B      	MOVLW       11
0x01A0	0x6E0B      	MOVWF       R11, 0
0x01A2	0x0E26      	MOVLW       38
0x01A4	0x6E0C      	MOVWF       R12, 0
0x01A6	0x0E5D      	MOVLW       93
0x01A8	0x6E0D      	MOVWF       R13, 0
L_main9:
0x01AA	0x2E0D      	DECFSZ      R13, 1, 0
0x01AC	0xD7FE      	BRA         L_main9
0x01AE	0x2E0C      	DECFSZ      R12, 1, 0
0x01B0	0xD7FC      	BRA         L_main9
0x01B2	0x2E0B      	DECFSZ      R11, 1, 0
0x01B4	0xD7FA      	BRA         L_main9
0x01B6	0x0000      	NOP
0x01B8	0x0000      	NOP
;EX15.c,59 :: 		}
L_main7:
;EX15.c,61 :: 		if (portb.f1 == 0 && lastStateF1 == 1) {  // Se a chave 1 é pressionada (saída de pessoa)
0x01BA	0xB281      	BTFSC       PORTB, 1 
0x01BC	0xD01D      	BRA         L_main12
0x01BE	0x5015      	MOVF        _lastStateF1, 0 
0x01C0	0x0A01      	XORLW       1
0x01C2	0xE11A      	BNZ         L_main12
L__main19:
;EX15.c,62 :: 		if (peopleCount > 0) {  // Verifica se o número de pessoas é maior que 0
0x01C4	0x0E00      	MOVLW       0
0x01C6	0x6E00      	MOVWF       R0 
0x01C8	0x5018      	MOVF        _peopleCount+1, 0 
0x01CA	0x5C00      	SUBWF       R0, 0 
0x01CC	0xE102      	BNZ         L__main24
0x01CE	0x5017      	MOVF        _peopleCount, 0 
0x01D0	0x0800      	SUBLW       0
L__main24:
0x01D2	0xE204      	BC          L_main13
;EX15.c,63 :: 		peopleCount--;  // Decrementa o contador de pessoas
0x01D4	0x0E01      	MOVLW       1
0x01D6	0x5E17      	SUBWF       _peopleCount, 1 
0x01D8	0x0E00      	MOVLW       0
0x01DA	0x5A18      	SUBWFB      _peopleCount+1, 1 
;EX15.c,64 :: 		}
L_main13:
;EX15.c,66 :: 		delay_ms(1000);  // Aguarda 100 ms para evitar contagem múltipla de uma única pessoa
0x01DC	0x0E0B      	MOVLW       11
0x01DE	0x6E0B      	MOVWF       R11, 0
0x01E0	0x0E26      	MOVLW       38
0x01E2	0x6E0C      	MOVWF       R12, 0
0x01E4	0x0E5D      	MOVLW       93
0x01E6	0x6E0D      	MOVWF       R13, 0
L_main14:
0x01E8	0x2E0D      	DECFSZ      R13, 1, 0
0x01EA	0xD7FE      	BRA         L_main14
0x01EC	0x2E0C      	DECFSZ      R12, 1, 0
0x01EE	0xD7FC      	BRA         L_main14
0x01F0	0x2E0B      	DECFSZ      R11, 1, 0
0x01F2	0xD7FA      	BRA         L_main14
0x01F4	0x0000      	NOP
0x01F6	0x0000      	NOP
;EX15.c,67 :: 		}
L_main12:
;EX15.c,69 :: 		if (portb.f2 == 0 && lastStateF2 == 1) {     // reseta
0x01F8	0xB481      	BTFSC       PORTB, 2 
0x01FA	0xD005      	BRA         L_main17
0x01FC	0x5016      	MOVF        _lastStateF2, 0 
0x01FE	0x0A01      	XORLW       1
0x0200	0xE102      	BNZ         L_main17
L__main18:
;EX15.c,70 :: 		peopleCount = 0;
0x0202	0x6A17      	CLRF        _peopleCount 
0x0204	0x6A18      	CLRF        _peopleCount+1 
;EX15.c,71 :: 		}
L_main17:
;EX15.c,72 :: 		}
0x0206	0xD75E      	BRA         L_main0
;EX15.c,73 :: 		}
L_end_main:
0x0208	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [54]    _Div_16X16_U
0x0052      [62]    _getSegmentValue
0x0090      [16]    ___CC2DW
0x00A0     [362]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    _lastStateF1
0x0016       [1]    _lastStateF2
0x0017       [2]    _peopleCount
0x0019       [1]    _lastStateF0
0x001A       [1]    main_tens_L1
0x001B       [1]    main_units_L1
0x001C       [2]    FLOC__main
0x001E       [1]    FARG_getSegmentValue_digit
0x001F      [10]    getSegmentValue_segmentValues_L0
0x0F80       [1]    PORTA
0x0F81       [1]    PORTB
0x0F83       [1]    PORTD
0x0F92       [1]    TRISA
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
