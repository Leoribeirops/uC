;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/10/2023 20:35:09
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF16  	GOTO        44
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x001C	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x001E	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0022	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0024	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0026	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0028	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x002A	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x002C	0x0E01      	MOVLW       1
0x002E	0x6E15      	MOVWF       _lastStateF1 
0x0030	0x0E01      	MOVLW       1
0x0032	0x6E16      	MOVWF       _lastStateF2 
0x0034	0x0E01      	MOVLW       1
0x0036	0x6E17      	MOVWF       _lastStateF0 
;EX14.c,6 :: 		void main() {
;EX14.c,7 :: 		trisd = 0;  // Configura PORTD como saída
0x0038	0x6A95      	CLRF        TRISD 
;EX14.c,8 :: 		trisa = 0;  // Configura PORTA como saída
0x003A	0x6A92      	CLRF        TRISA 
;EX14.c,9 :: 		adcon0 = 0;  // Configura ADCON0 para modo digital
0x003C	0x6AC2      	CLRF        ADCON0 
;EX14.c,10 :: 		adcon1 = 15;  // Configura ADCON1 para modo digital
0x003E	0x0E0F      	MOVLW       15
0x0040	0x6EC1      	MOVWF       ADCON1 
;EX14.c,11 :: 		portb.f0 = 1;
0x0042	0x8081      	BSF         PORTB, 0 
;EX14.c,12 :: 		portb.f1 = 1;
0x0044	0x8281      	BSF         PORTB, 1 
;EX14.c,13 :: 		portb.f2 = 1;
0x0046	0x8481      	BSF         PORTB, 2 
;EX14.c,14 :: 		peopleCount = 0;
0x0048	0x6A18      	CLRF        _peopleCount 
;EX14.c,16 :: 		while (1) {
L_main0:
;EX14.c,17 :: 		switch(peopleCount) {
0x004A	0xD01E      	BRA         L_main2
;EX14.c,18 :: 		case 0: portd=0b00111111; break;  // 0
L_main4:
0x004C	0x0E3F      	MOVLW       63
0x004E	0x6E83      	MOVWF       PORTD 
0x0050	0xD039      	BRA         L_main3
;EX14.c,19 :: 		case 1: portd=0b00000110; break;  // 1
L_main5:
0x0052	0x0E06      	MOVLW       6
0x0054	0x6E83      	MOVWF       PORTD 
0x0056	0xD036      	BRA         L_main3
;EX14.c,20 :: 		case 2: portd=0b01011011; break;  // 2
L_main6:
0x0058	0x0E5B      	MOVLW       91
0x005A	0x6E83      	MOVWF       PORTD 
0x005C	0xD033      	BRA         L_main3
;EX14.c,21 :: 		case 3: portd=0b01001111; break;  // 3
L_main7:
0x005E	0x0E4F      	MOVLW       79
0x0060	0x6E83      	MOVWF       PORTD 
0x0062	0xD030      	BRA         L_main3
;EX14.c,22 :: 		case 4: portd=0b01100110; break;  // 4
L_main8:
0x0064	0x0E66      	MOVLW       102
0x0066	0x6E83      	MOVWF       PORTD 
0x0068	0xD02D      	BRA         L_main3
;EX14.c,23 :: 		case 5: portd=0b01101101; break;  // 5
L_main9:
0x006A	0x0E6D      	MOVLW       109
0x006C	0x6E83      	MOVWF       PORTD 
0x006E	0xD02A      	BRA         L_main3
;EX14.c,24 :: 		case 6: portd=0b01111101; break;  // 6
L_main10:
0x0070	0x0E7D      	MOVLW       125
0x0072	0x6E83      	MOVWF       PORTD 
0x0074	0xD027      	BRA         L_main3
;EX14.c,25 :: 		case 7: portd=0b00000111; break;  // 7
L_main11:
0x0076	0x0E07      	MOVLW       7
0x0078	0x6E83      	MOVWF       PORTD 
0x007A	0xD024      	BRA         L_main3
;EX14.c,26 :: 		case 8: portd=0b01111111; break;  // 8
L_main12:
0x007C	0x0E7F      	MOVLW       127
0x007E	0x6E83      	MOVWF       PORTD 
0x0080	0xD021      	BRA         L_main3
;EX14.c,27 :: 		case 9: portd=0b01101111; break;  // 9
L_main13:
0x0082	0x0E6F      	MOVLW       111
0x0084	0x6E83      	MOVWF       PORTD 
0x0086	0xD01E      	BRA         L_main3
;EX14.c,28 :: 		}
L_main2:
0x0088	0x5018      	MOVF        _peopleCount, 0 
0x008A	0x0A00      	XORLW       0
0x008C	0xE0DF      	BZ          L_main4
0x008E	0x5018      	MOVF        _peopleCount, 0 
0x0090	0x0A01      	XORLW       1
0x0092	0xE0DF      	BZ          L_main5
0x0094	0x5018      	MOVF        _peopleCount, 0 
0x0096	0x0A02      	XORLW       2
0x0098	0xE0DF      	BZ          L_main6
0x009A	0x5018      	MOVF        _peopleCount, 0 
0x009C	0x0A03      	XORLW       3
0x009E	0xE0DF      	BZ          L_main7
0x00A0	0x5018      	MOVF        _peopleCount, 0 
0x00A2	0x0A04      	XORLW       4
0x00A4	0xE0DF      	BZ          L_main8
0x00A6	0x5018      	MOVF        _peopleCount, 0 
0x00A8	0x0A05      	XORLW       5
0x00AA	0xE0DF      	BZ          L_main9
0x00AC	0x5018      	MOVF        _peopleCount, 0 
0x00AE	0x0A06      	XORLW       6
0x00B0	0xE0DF      	BZ          L_main10
0x00B2	0x5018      	MOVF        _peopleCount, 0 
0x00B4	0x0A07      	XORLW       7
0x00B6	0xE0DF      	BZ          L_main11
0x00B8	0x5018      	MOVF        _peopleCount, 0 
0x00BA	0x0A08      	XORLW       8
0x00BC	0xE0DF      	BZ          L_main12
0x00BE	0x5018      	MOVF        _peopleCount, 0 
0x00C0	0x0A09      	XORLW       9
0x00C2	0xE0DF      	BZ          L_main13
L_main3:
;EX14.c,30 :: 		if (portb.f0 == 0 && lastStateF0 == 1) {  // Se a chave 0 é pressionada (entrada de pessoa)
0x00C4	0xB081      	BTFSC       PORTB, 0 
0x00C6	0xD015      	BRA         L_main16
0x00C8	0x5017      	MOVF        _lastStateF0, 0 
0x00CA	0x0A01      	XORLW       1
0x00CC	0xE112      	BNZ         L_main16
L__main29:
;EX14.c,31 :: 		if (peopleCount < 9) {  // Verifica se o número de pessoas é menor que 9
0x00CE	0x0E09      	MOVLW       9
0x00D0	0x5C18      	SUBWF       _peopleCount, 0 
0x00D2	0xA0D8      	BTFSS       STATUS, 0 
;EX14.c,32 :: 		peopleCount++;  // Incrementa o contador de pessoas
0x00D4	0x2A18      	INCF        _peopleCount, 1 
;EX14.c,33 :: 		}
L_main17:
;EX14.c,35 :: 		delay_ms(1000);  // Aguarda 100 ms para evitar contagem múltipla de uma única pessoa
0x00D6	0x0E0B      	MOVLW       11
0x00D8	0x6E0B      	MOVWF       R11, 0
0x00DA	0x0E26      	MOVLW       38
0x00DC	0x6E0C      	MOVWF       R12, 0
0x00DE	0x0E5D      	MOVLW       93
0x00E0	0x6E0D      	MOVWF       R13, 0
L_main18:
0x00E2	0x2E0D      	DECFSZ      R13, 1, 0
0x00E4	0xD7FE      	BRA         L_main18
0x00E6	0x2E0C      	DECFSZ      R12, 1, 0
0x00E8	0xD7FC      	BRA         L_main18
0x00EA	0x2E0B      	DECFSZ      R11, 1, 0
0x00EC	0xD7FA      	BRA         L_main18
0x00EE	0x0000      	NOP
0x00F0	0x0000      	NOP
;EX14.c,36 :: 		}
L_main16:
;EX14.c,38 :: 		if (portb.f1 == 0 && lastStateF1 == 1) {  // Se a chave 1 é pressionada (saída de pessoa)
0x00F2	0xB281      	BTFSC       PORTB, 1 
0x00F4	0xD015      	BRA         L_main21
0x00F6	0x5015      	MOVF        _lastStateF1, 0 
0x00F8	0x0A01      	XORLW       1
0x00FA	0xE112      	BNZ         L_main21
L__main28:
;EX14.c,39 :: 		if (peopleCount > 0) {  // Verifica se o número de pessoas é maior que 0
0x00FC	0x5018      	MOVF        _peopleCount, 0 
0x00FE	0x0800      	SUBLW       0
0x0100	0xA0D8      	BTFSS       STATUS, 0 
;EX14.c,40 :: 		peopleCount--;  // Decrementa o contador de pessoas
0x0102	0x0618      	DECF        _peopleCount, 1 
;EX14.c,41 :: 		}
L_main22:
;EX14.c,43 :: 		delay_ms(1000);  // Aguarda 100 ms para evitar contagem múltipla de uma única pessoa
0x0104	0x0E0B      	MOVLW       11
0x0106	0x6E0B      	MOVWF       R11, 0
0x0108	0x0E26      	MOVLW       38
0x010A	0x6E0C      	MOVWF       R12, 0
0x010C	0x0E5D      	MOVLW       93
0x010E	0x6E0D      	MOVWF       R13, 0
L_main23:
0x0110	0x2E0D      	DECFSZ      R13, 1, 0
0x0112	0xD7FE      	BRA         L_main23
0x0114	0x2E0C      	DECFSZ      R12, 1, 0
0x0116	0xD7FC      	BRA         L_main23
0x0118	0x2E0B      	DECFSZ      R11, 1, 0
0x011A	0xD7FA      	BRA         L_main23
0x011C	0x0000      	NOP
0x011E	0x0000      	NOP
;EX14.c,44 :: 		}
L_main21:
;EX14.c,46 :: 		if (portb.f2 == 0 && lastStateF2 == 1) {
0x0120	0xB481      	BTFSC       PORTB, 2 
0x0122	0xD004      	BRA         L_main26
0x0124	0x5016      	MOVF        _lastStateF2, 0 
0x0126	0x0A01      	XORLW       1
0x0128	0xB4D8      	BTFSC       STATUS, 2 
L__main27:
;EX14.c,47 :: 		peopleCount = 0;
0x012A	0x6A18      	CLRF        _peopleCount 
;EX14.c,48 :: 		}
L_main26:
;EX14.c,50 :: 		porta=0b00001000;  // Exibe o número de pessoas no display ativado por RA3
0x012C	0x0E08      	MOVLW       8
0x012E	0x6E80      	MOVWF       PORTA 
;EX14.c,51 :: 		}
0x0130	0xD78C      	BRA         L_main0
;EX14.c,52 :: 		}
L_end_main:
0x0132	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [16]    ___CC2DW
0x002C     [264]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    _lastStateF1
0x0016       [1]    _lastStateF2
0x0017       [1]    _lastStateF0
0x0018       [1]    _peopleCount
0x0F80       [1]    PORTA
0x0F81       [1]    PORTB
0x0F83       [1]    PORTD
0x0F92       [1]    TRISA
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FC2       [1]    ADCON0
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
